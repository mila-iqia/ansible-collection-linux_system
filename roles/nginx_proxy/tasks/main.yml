---
- name: Install nginx
  ansible.builtin.apt:
    name: "nginx={{ nginx_proxy_version }}"
  notify: enable nginx

- name: Create nginx logs dir
  ansible.builtin.file:
    path: "{{ nginx_log_dir }}"
    state: directory
    mode: 0750
    owner: "{{ nginx_user }}"
    group: "{{ nginx_group }}"

- name: Install nginx logrotate config
  ansible.builtin.template:
    src: logrotate.conf.j2
    dest: /etc/logrotate.d/nginx
    mode: 0644

- name: Install nginx config
  ansible.builtin.template:
    src: nginx.conf.j2
    dest: /etc/nginx/nginx.conf
    owner: root
    group: root
    mode: 0644
  notify: reload nginx

- name: Install default SSL certificate
  ansible.builtin.copy:
    content: "{{ nginx_proxy_default_ssl_cert | mandatory }}"
    dest: /etc/ssl/nginx_proxy.crt
    mode: 0600

- name: Install default SSL key
  ansible.builtin.copy:
    content: "{{ nginx_proxy_default_ssl_key | mandatory }}"
    dest: /etc/ssl/nginx_proxy.key
    mode: 0600

- name: Install proxy SSL certificates
  ansible.builtin.copy:
    content: "{{ item.ssl_cert }}"
    dest: "/etc/ssl/{{ item.name }}.crt"
    mode: 0600
  loop: "{{ nginx_proxy_sites }}"
  when: item.ssl_cert is defined

- name: Install proxy SSL keys
  ansible.builtin.copy:
    content: "{{ item.ssl_key }}"
    dest: "/etc/ssl/{{ item.name }}.key"
    mode: 0600
  loop: "{{ nginx_proxy_sites }}"
  when: item.ssl_key is defined

- name: Configure proxies
  ansible.builtin.template:
    src: site.conf.j2
    dest: "/etc/nginx/sites-available/{{ item.name }}"
    owner: root
    group: root
    mode: 0644
  loop: "{{ nginx_proxy_sites }}"
  notify: reload nginx

- name: Make list of needed sites
  ansible.builtin.set_fact:
    needed_sites: "{{ nginx_proxy_sites | map(attribute='name') }}"

- name: List nginx available sites
  ansible.builtin.find:
    paths: /etc/nginx/sites-available
  register: nginx_sites_available

- name: Delete unmanaged available sites
  ansible.builtin.file:
    path: "/etc/nginx/sites-available/{{ item }}"
    state: absent
  loop: "{{ nginx_sites_available.files | map(attribute='path') | map('basename') | list }}"
  when: item not in needed_sites
  notify: reload nginx

- name: Enable proxies
  ansible.builtin.file:
    src: "/etc/nginx/sites-available/{{ item.name }}"
    dest: "/etc/nginx/sites-enabled/{{ item.name }}"
    state: link
  loop: "{{ nginx_proxy_sites }}"
  notify: reload nginx

- name: List nginx enabled sites
  ansible.builtin.find:
    paths: /etc/nginx/sites-enabled
    file_type: any
  register: nginx_sites_enabled

- name: Delete unmanaged enabled sites
  ansible.builtin.file:
    path: "/etc/nginx/sites-enabled/{{ item }}"
    state: absent
  loop: "{{ nginx_sites_enabled.files | map(attribute='path') | map('basename') | list }}"
  when: item not in needed_sites
  notify: reload nginx
